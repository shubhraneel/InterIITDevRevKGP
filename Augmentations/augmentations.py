# -*- coding: utf-8 -*-
"""Copy of Adv Example via Augmentations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RORhrGSwN5TS6jGbuhrL81LmgmfsScVq
"""
'''
from google.colab import drive
drive.mount('/content/drive')
'''

import numpy as np
import pandas as pd

df = pd.read_csv("df_train.csv")
Question_list = df["question"]

"""#NLPAttack

##Installation
"""

! pip3 install textattack[tensorflow]

# import transformations, contraints, and the Augmenter
from textattack.transformations import WordSwapRandomCharacterDeletion
from textattack.transformations import WordSwapQWERTY
from textattack.transformations import CompositeTransformation

from textattack.constraints.pre_transformation import RepeatModification
from textattack.constraints.pre_transformation import StopwordModification

from textattack.augmentation import Augmenter





"""##WordNet Augmenter"""

from textattack.augmentation import WordNetAugmenter
augmenter = WordNetAugmenter()
df['augmented_qs_wordnet'] = df.apply(lambda row: augmenter.augment(row.question), axis = 1)

df['augmented_qs_wordnet']

df.to_csv('train_data_plus_aug_WordNet.csv')





"""##Character Augmenter"""

# Set up transformation using CompositeTransformation()
transformation = CompositeTransformation([WordSwapQWERTY()])
# Set up constraints
constraints = [RepeatModification(), StopwordModification()]
# Create augmenter with specified parameters
augmenter = Augmenter(transformation=transformation, constraints=constraints, pct_words_to_swap=0.2, transformations_per_example=1)

def CharSwap(question):
  try:
    aug_qs = augmenter.augment(question)
  except Exception as e:
    return question
    #augmented_question.append(question)
  else:
    return aug_qs[0]
    #augmented_question.append(aug_qs[0])

df['augmented_qs_charswap'] = df['question'].map(CharSwap)  ## Only Char Swap
display(df.head())

df.to_csv('train_data_plus_aug_CharSwap.csv')







df['augmented_qs_wordnet_plus_charswap'] = df['augmented_qs_wordnet'].map(CharSwap)   ##Both Aug together
display(df.head())

#df.drop(['augmented_qs_wordnet'], axis=1)

##Do this only if both Aug together needed else save each aug column individually- only WordNet, only CharSwap, Both Togeteher

df.to_csv('train_qs_all_augmentation.csv')

